package org.bumo.sdk.core.utils.id;

public class KeyGeneratorFactory{

    private static final char[] base36 = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
            'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

    private char[][] baseChars;

    /**
     * @param baseChars The base of a digit; a two element array whose length represents the number of bits generated by key and the character range of each bit
     */
    private KeyGeneratorFactory(char[][] baseChars){
        if (baseChars.length == 0) {
            throw new IllegalArgumentException("Empty baseChars!");
        }
        for (char[] cs : baseChars) {
            if (cs == null || cs.length == 0) {
                throw new IllegalArgumentException("Empty baseChars!");
            }
        }
        this.baseChars = baseChars;
    }

    /**
     * Create a factory instance of KeyGenerator based on a base of 36
     *
     * @param len key的length；
     * @return
     */
    public static KeyGeneratorFactory createBase36Instance(int len){
        if (len <= 0) {
            throw new IllegalArgumentException("The len is less than or equal zero!");
        }
        char[][] baseChars = new char[len][];
        for (int i = 0; i < baseChars.length; i++) {
            baseChars[i] = base36;
        }
        return new KeyGeneratorFactory(baseChars);
    }

    /**
     * Create an KeyGenerator instance
     * <p>
     * Note: the implementation of KeyGenerator returned by this method is not thread safe
     *
     * @return
     */
    public KeyGenerator createKeyGenerator(){
        return new CommonKeyGenerator();
    }

    private class CommonKeyGenerator implements KeyGenerator{

        private int[] indexes;

        /**
         * Create an instance of KeyGenerator
         *
         * @param baseChars The base of a digit; a two element array whose length represents the number of bits generated by key and the character range of each bit
         */
        private CommonKeyGenerator(){
            indexes = new int[baseChars.length];
        }

        @Override
        public String next(){
            StringBuilder key = new StringBuilder();
            for (int i = 0; i < baseChars.length; i++) {
                key.append(baseChars[i][indexes[i]]);
            }
            indexes[baseChars.length - 1]++;
            for (int i = indexes.length - 1; i > -1; i--) {
                if (indexes[i] == baseChars[i].length) {
                    if (i > 0) {
                        // carry
                        indexes[i - 1]++;
                    } else {
                        // Overflow, overlook
                    }
                    indexes[i] = 0;
                }
            }
            return key.toString();
        }

    }

}
